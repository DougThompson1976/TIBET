.TH "TIBET\-ROLLUP" "1" "July 2017" "" ""
.SH "NAME"
\fBtibet-rollup\fR \- concatenates a package#config's resources
.SH SYNOPSIS
.P
tibet rollup [package\-opts] [\-\-headers] [\-\-minify]
.SH DESCRIPTION
.P
Creates a concatenated and optionally minified version of a \fBpackage#config\fP\|\.
.P
This command is normally invoked via \fBtibet build\fP rather than manually, however
.br
you can use it directly if you desire\.
.P
Output from this command is written to stdout for use in redirection\.
.br
By default the output is not minified but it does it contain filename
.br
data (aka 'headers') to assist TIBET by providing file load metadata\.
.P
You can minify output via the \fB\-\-minify\fP flag, and turn off headers via
.br
\fB\-\-no\-headers\fP should you choose\. Normally these flags are managed by one
.br
or more \fBmakefile\.js\fP targets used to build library or app\-level bundles\.
.P
Note that in its current form TIBET does not play well with minifiers which
.br
rename functions\. TIBET makes extensive use of dynamic method invocations which
.br
preclude using generic obfuscators, at least in their more agressive forms\.
.br
Future extensions to this command will support TIBET\-specific obfuscations\.
.P
See \fBhttps://github\.com/estools/escodegen/wiki/API\fP for current options\. The
.br
options which affect this command should be set via \fBtibet config\fP\|\. Default
.br
\fBtibet\.json\fP files include the following settings:
.P
.RS 2
.nf
"escodegen": {
    "format": {
        "compact": true
    }
},
.fi
.RE
.SH OPTIONS
.RS 0
.IP \(bu 2
\fB\-\-headers\fP :
.br
Tells the rollup process to include 'header' information which points to the
.br
source file(s) used in the rollup\. This information is necessary for certain
.br
TIBET reflection operations at runtime\.
.IP \(bu 2
\fB\-\-minify\fP :
.br
Signifies that the rollup output should pass through the \fBescodegen\fP
.br
minification process\. Note that overly agressive obfuscation will cause TIBET
.br
code to fail\. Future additions to TIBET will support more agressive
.br
minification\.
.IP \(bu 2
\fB[package\-opts]\fP :
.br
Refers to valid options for a TIBET Package object\. These include \-\-package,
.br
\-\-config, \-\-phase, \-\-assets, etc\. The package#config defaults to
.br
\fB~app_cfg/main\.xml\fP and its default config (usually #base) so your typical
.br
configuration is built\. See help on the \fBtibet package\fP command for more
.br
information\.

.RE
.SH EXAMPLES
.SS Roll up the default package#config
.P
.RS 2
.nf
$ tibet rollup

TP\.boot\.$$srcPath = '~app_src/APP\.hello\.js';
/**
 * @type {Namespace}
 * @summary Defines namespace\-level objects and functionality for the project\.
 */

/**
 * Define the JavaScript namespace object which will hold application code\.
 */
TP\.defineNamespace('APP\.hello');
\|\.\.\.
\|\.\.\.
TP\.boot\.$$srcPath = '~app_build/tags\.APP\.hello\.app\.xhtml\.js';
TP\.uc('~app_src/tags/APP\.hello\.app\.xhtml')\.setContent(
\|'    <h1 tibet:tag="hello:app" class="hello">\\n        Welcome to your new TIBET application!\\n    </h1>\\n'
);
.fi
.RE
.SS Roll up application resources in minified form
.P
.RS 2
.nf
$ tibet rollup \-\-minify

TP\.boot\.$$srcPath = '~app_src/APP\.hello\.js';
TP\.defineNamespace('APP\.hello');TP\.w3\.Xmlns\.registerNSInfo('urn:app:hello',TP\.hc('prefix','hello'));
TP\.boot\.$$srcPath = '~app_src/APP\.hello\.Application\.js';
TP\.core\.Application\.defineSubtype('APP\.hello\.Application');APP\.hello\.Application\.Inst\.defineHandler('AppDidInitialize',function(b){var a;a=TP\.core\.StateMachine\.construct();a\.defineState(null,'home');a\.defineState('home','fuzzy');a\.defineState('home','fluffy');a\.defineState('fuzzy','fluffy');a\.defineState('fluffy','fuzzy');a\.defineState('fluffy');a\.defineState('fuzzy');a\.activate();this\.setStateMachine(a);TP\.sys\.getLocale()\.registerStrings({HELLO:'Hello World!'});return this;});
TP\.boot\.$$srcPath = '~app_src/tags/APP\.hello\.app\.js';
TP\.core\.TemplatedTag\.defineSubtype('APP\.hello:app');
TP\.boot\.$$srcPath = '~app_build/tags\.APP\.hello\.app\.xhtml\.js';
TP\.uc('~app_src/tags/APP\.hello\.app\.xhtml')\.setContent('    <h1 tibet:tag="hello:app" class="hello">\\n        Welcome to your new TIBET application!\\n    </h1>\\n');
TP\.boot\.$$srcPath = '~app_build/tags\.APP\.hello\.app\.css\.js';
TP\.uc('~app_src/tags/APP\.hello\.app\.css')\.setContent('/**\\n * @overview \\'APP\.hello\.app\\' styles\.\\n */\\n\\n@namespace tibet url(http://www\.technicalpursuit\.com/1999/tibet);\\n@namespace hello url(urn:tibet:hello);\\n\\n/**\\n * If your template/compile process transforms <hello:app/> tags\\n * from namespaced XML into XHTML with a tibet:tag attribute so they render\\n * in the page similar to <div tibet:tag="hello:app"/> place your\\n * style in rules with the following root form:\\n */\\n*[tibet|tag="hello:app"] {\\n    /* style here for xhtml converted tags */\\n}\\n\\n/**\\n * If you don\\'t transform from XML form (tags in the page remain in their\\n * <hello:app/> form) use rules of this form:\\n */\\nhello|app {\\n}\\n');
.fi
.RE
.SH SEE ALSO
.RS 0
.IP \(bu 2
package(1)
.IP \(bu 2
resources(1)

.RE

