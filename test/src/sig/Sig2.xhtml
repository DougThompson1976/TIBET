<?xml version="1.0"?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<head>

	<title></title>

	<script type="text/javascript" src="~lib_lib/src/tibet_hook.min.js">
	</script>

    <link type="text/css" rel="stylesheet" href="~lib_lib/css/tibet.css"/>

	<style type="text/css">
	<![CDATA[
	ol
	{
		font-weight: normal;
	}
	]]>
	</style>
</head>

<body xmlns:sig="http://www.technicalpursuit.com/1999/signals"
		xmlns:ev="http://www.w3.org/2001/xml-events">

	<h2>Sig Test #2</h2><br/>
	<br/>
	<br/>
	This test sets up three XMLEvents &lt;ev:listener&gt; elements that listen for the 'goofy' signal. These signals come from a variety of sources, all internal to TIBET.<br/>
	<ol>
		<li>A TIBET type object, named Barfy, with a 'handleGoofy' 'type method'</li>
		<li>An instance of the 'Barfy' object with a 'handleGoofy' 'instance method'</li>
		<li>An instance of the 'TPObject' object with a 'handleGoofy' method 'instance programmed' via the defineMethod() call</li>
	</ol>
	<br/>
	<br/>

	<!-- This is a special listener that simply sets up the 3 objects needed for this test. You would never normally do this here as all substantive JavaScript belongs in the code frame -->
	<ev:script type="text/javascript" event="TP.sig.DOMContentLoaded" observer="#document">
        <![CDATA[
        var myBarfy,
            blandObj;

		//	If the type is already registered, then this page has already
		//	been loaded once, so just bail out here.
		if (TP.isValid(TP.sys.getTypeByName('TP.test.Barfy'))) {
			return;
		}

		//	Create the type
		TP.lang.Object.defineSubtype('test.Barfy');

		TP.test.Barfy.Type.defineMethod(
					'handleGoofy',
                    function(aSignal) {
                        this.ignore(null,
                                    aSignal.getSignalName());
                        TP.byOID('testResults').setAttribute(
                                        'goofy_typemethod', 'true');
					});
		TP.test.Barfy.Inst.defineMethod(
					'handleGoofy',
					function(aSignal) {
                        this.ignore(null,
                                    aSignal.getSignalName());
                        TP.byOID('testResults').setAttribute(
                                        'goofy_instmethod', 'true');
					});

		//	Set up the 'type-level' observation
		TP.test.Barfy.observe(null, 'goofy');

		//	Create the instance
		myBarfy = TP.test.Barfy.construct();

		//	Set up the 'instance-level' observation
		myBarfy.observe(null, 'goofy');

		//	Set up a 'bland instance' (i.e. of TP.lang.Object) that is locally
		//	programmed to respond to 'goofy'

		//	Create the instance
		blandObj = TP.lang.Object.construct();

		//	Add a 'local' (to this instance only) method
		blandObj.defineMethod(
					'handleGoofy',
					function(aSignal) {
                        this.ignore(null,
                                    aSignal.getSignalName());
                        TP.byOID('testResults').setAttribute(
                                        'goofy_localmethod', 'true');
					});

		//	Set up the 'local-level' observation
		blandObj.observe(null, 'goofy');
		]]>
	</ev:script>

	<sig:dispatch id="clickDispatcher" ev:event="TP.sig.DOMClick" ev:observer="dispatchButton" name="goofy"/>

    <button id="dispatchButton">Click me to dispatch the 'goofy' signal</button>

    <!-- The test result data goes here -->
    <span id="testResults"/>

</body>
</html>
